{"version":3,"file":"Table.js","sourceRoot":"","sources":["../src/Table.tsx"],"names":[],"mappings":";;;AAAA,6BAA+B;AAC/B,6CAA0C;AAC1C,yCAAsC;AACtC,gDAAyC;AACzC,yCAAwC;AACxC,uCAAsC;AACtC,iDAAgD;AA2CzC,IAAM,KAAK,GAAG,UAAM,KAAoB;;IAE3C,IAAM,kBAAkB,GAAG,KAAK,CAAC,QAAQ,CAAC;IAC1C,IAAM,GAAG,GAAG,OAAO,kBAAkB,KAAK,UAAU;QAChD,CAAC,CAAE,kBAAkB,CAAC;YACd,WAAW,2BAAA;YACX,SAAS,uBAAA;YACT,QAAQ,qBAAA;YACR,SAAS,uBAAA;YACT,aAAa,+BAAA;SAChB,CAAS,CAAC,KAAK,CAAC,QAA6B;QAClD,CAAC,CAAC,kBAAkB,CAAC;IAEzB,IAAM,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IAC7C,IAAM,WAAW,GAAG,QAAQ,CAAC,IAAI,CAAC,UAAC,CAAqB,IAAK,OAAA,CAAC,CAAC,IAAI,KAAK,yBAAW,EAAtB,CAAsB,CAAuB,CAAC;IAC3G,IAAM,SAAS,GAAG,QAAQ,CAAC,IAAI,CAAC,UAAC,CAAqB,IAAK,OAAA,CAAC,CAAC,IAAI,KAAK,qBAAS,EAApB,CAAoB,CAAuB,CAAC;IAEvG,IAAM,iBAAiB,GAAG,KAAK,CAAC,YAAY,CAAC,SAAS,EAAE;QACpD,IAAI,EAAE,MAAA,MAAA,MAAA,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,KAAK,0CAAE,IAAW,mCAAI,KAAK,CAAC,IAAI,mCAAI,EAAE;QACvD,eAAe,EAAE,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,WAAW;QACtD,KAAK,EAAE,MAAA,MAAA,MAAA,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,KAAK,0CAAE,KAAK,mCAAI,KAAK,CAAC,KAAK,mCAAI,KAAK;QACtD,YAAY,EAAE,MAAA,MAAA,MAAA,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,KAAK,0CAAE,YAAY,mCAAI,KAAK,CAAC,YAAY,mCAAI,EAAE;QACxE,WAAW,EAAE,MAAA,MAAA,MAAA,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,KAAK,0CAAE,WAAW,mCAAI,KAAK,CAAC,WAAW,mCAAI,EAAE;KACxE,CAAC,CAAC;IAEH,OAAO,CACH,oBAAC,eAAI,IACD,KAAK,EAAE;YACH,KAAK,EAAE,MAAM;SAChB;QAEA,WAAW;QACX,iBAAiB,CACf,CACV,CAAC;AACN,CAAC,CAAA;AAnCY,QAAA,KAAK,SAmCjB","sourcesContent":["import * as React from \"react\";\nimport {TableHeader} from \"./TableHeader\";\nimport {TableBody} from \"./TableBody\";\nimport {View} from \"@react-pdf/renderer\";\nimport { TableCell } from \"./TableCell\";\nimport { TableRow } from \"./TableRow\";\nimport { DataTableCell } from \"./DataTableCell\";\n\nexport interface ZebraProps {\n    /**\n     * Whether to display alternate row colours.\n     * Defaults to false.\n     */\n    zebra?: boolean;\n\n    /**\n     * The even row colour when {@see zebra} is true.\n     * Defaults to lightgray if not defined.\n     */\n    evenRowColor?: string;\n\n    /**\n     * The odd row colour when {@see zebra} is true.\n     * Defaults to transparent or '' if not defined.\n     */\n    oddRowColor?: string;\n}\n\nexport interface TableProps<T> extends ZebraProps {\n    /**\n     * The table data to display.\n     */\n    data?: Array<T>;\n\n    /**\n     * Indicates that this is a nested table.\n     * Otherwise assumed to be false.\n     */\n    isNested?: boolean;\n\n    children?: React.ReactNode | ((e: { \n        TableHeader: typeof TableHeader;\n        TableBody: typeof TableBody<T>;\n        TableRow: typeof TableRow<T>;\n        TableCell: typeof TableCell;\n        DataTableCell: typeof DataTableCell<T>;\n    }) => React.ReactFragment);\n}\n\nexport const Table = <T,> (props: TableProps<T>) => {\n\n    const fragmentOrChildren = props.children;\n    const tmp = typeof fragmentOrChildren === 'function'\n        ? (fragmentOrChildren({\n                TableHeader,\n                TableBody,\n                TableRow,\n                TableCell,\n                DataTableCell,\n            }) as any).props.children as React.ReactNode[]\n        : fragmentOrChildren;\n\n    const children = React.Children.toArray(tmp);\n    const tableHeader = children.find((e: React.ReactElement) => e.type === TableHeader) as React.ReactElement;\n    const tableBody = children.find((e: React.ReactElement) => e.type === TableBody) as React.ReactElement;\n\n    const fallbackTableBody = React.cloneElement(tableBody, {\n        data: tableBody?.props?.data as T[] ?? props.data ?? [],\n        renderTopBorder: props.isNested ? false : !tableHeader,\n        zebra: tableBody?.props?.zebra ?? props.zebra ?? false,\n        evenRowColor: tableBody?.props?.evenRowColor ?? props.evenRowColor ?? '',\n        oddRowColor: tableBody?.props?.oddRowColor ?? props.oddRowColor ?? '',\n    });\n\n    return (\n        <View\n            style={{\n                width: \"100%\",\n            }}\n        >\n            {tableHeader}\n            {fallbackTableBody}\n        </View>\n    );\n}\n"]}