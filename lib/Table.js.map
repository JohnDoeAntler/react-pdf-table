{"version":3,"file":"Table.js","sourceRoot":"","sources":["../src/Table.tsx"],"names":[],"mappings":";;;AAAA,6BAA+B;AAC/B,6CAA0C;AAC1C,yCAAsC;AACtC,gDAAyC;AAqClC,IAAM,KAAK,GAAyB,UAAC,KAAK;;IAE7C,IAAM,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;IACxD,IAAM,WAAW,GAAG,QAAQ,CAAC,IAAI,CAAC,UAAC,CAAqB,IAAK,OAAA,CAAC,CAAC,IAAI,KAAK,yBAAW,EAAtB,CAAsB,CAAuB,CAAC;IAC3G,IAAM,SAAS,GAAG,QAAQ,CAAC,IAAI,CAAC,UAAC,CAAqB,IAAK,OAAA,CAAC,CAAC,IAAI,KAAK,qBAAS,EAApB,CAAoB,CAAuB,CAAC;IAEvG,IAAM,iBAAiB,GAAG,KAAK,CAAC,YAAY,CAAC,SAAS,EAAE;QACpD,IAAI,EAAE,MAAA,MAAA,MAAA,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,KAAK,0CAAE,IAAI,mCAAI,KAAK,CAAC,IAAI,mCAAI,EAAE;QAChD,eAAe,EAAE,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,WAAW;QACtD,KAAK,EAAE,MAAA,MAAA,MAAA,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,KAAK,0CAAE,KAAK,mCAAI,KAAK,CAAC,KAAK,mCAAI,KAAK;QACtD,YAAY,EAAE,MAAA,MAAA,MAAA,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,KAAK,0CAAE,YAAY,mCAAI,KAAK,CAAC,YAAY,mCAAI,EAAE;QACxE,WAAW,EAAE,MAAA,MAAA,MAAA,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,KAAK,0CAAE,WAAW,mCAAI,KAAK,CAAC,WAAW,mCAAI,EAAE;KACxE,CAAC,CAAC;IAEH,OAAO,CACH,oBAAC,eAAI,IACD,KAAK,EAAE;YACH,KAAK,EAAE,MAAM;SAChB;QAEA,WAAW;QACX,iBAAiB,CACf,CACV,CAAC;AACN,CAAC,CAAA;AAxBY,QAAA,KAAK,SAwBjB","sourcesContent":["import * as React from \"react\";\nimport {TableHeader} from \"./TableHeader\";\nimport {TableBody} from \"./TableBody\";\nimport {View} from \"@react-pdf/renderer\";\n\nexport interface ZebraProps {\n    /**\n     * Whether to display alternate row colours.\n     * Defaults to false.\n     */\n    zebra?: boolean;\n\n    /**\n     * The even row colour when {@see zebra} is true.\n     * Defaults to lightgray if not defined.\n     */\n    evenRowColor?: string;\n\n    /**\n     * The odd row colour when {@see zebra} is true.\n     * Defaults to transparent or '' if not defined.\n     */\n    oddRowColor?: string;\n}\n\nexport interface TableProps extends ZebraProps {\n    /**\n     * The table data to display.\n     */\n    data?: any[];\n\n    /**\n     * Indicates that this is a nested table.\n     * Otherwise assumed to be false.\n     */\n    isNested?: boolean;\n\n    children?: React.ReactNode;\n}\n\nexport const Table: React.FC<TableProps> = (props) => {\n\n    const children = React.Children.toArray(props.children);\n    const tableHeader = children.find((e: React.ReactElement) => e.type === TableHeader) as React.ReactElement;\n    const tableBody = children.find((e: React.ReactElement) => e.type === TableBody) as React.ReactElement;\n\n    const fallbackTableBody = React.cloneElement(tableBody, {\n        data: tableBody?.props?.data ?? props.data ?? [],\n        renderTopBorder: props.isNested ? false : !tableHeader,\n        zebra: tableBody?.props?.zebra ?? props.zebra ?? false,\n        evenRowColor: tableBody?.props?.evenRowColor ?? props.evenRowColor ?? '',\n        oddRowColor: tableBody?.props?.oddRowColor ?? props.oddRowColor ?? '',\n    });\n\n    return (\n        <View\n            style={{\n                width: \"100%\",\n            }}\n        >\n            {tableHeader}\n            {fallbackTableBody}\n        </View>\n    );\n}\n"]}