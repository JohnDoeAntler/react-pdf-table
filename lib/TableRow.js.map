{"version":3,"file":"TableRow.js","sourceRoot":"","sources":["../src/TableRow.tsx"],"names":[],"mappings":";;;AAAA,6BAA+B;AAG/B,gDAAyC;AACzC,iCAAiD;AAgD1C,IAAM,QAAQ,GAAsC,UAAC,KAAK;IAC/D,IAAM,QAAQ,GAAU,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;IACzD,IAAA,KAAiF,IAAA,gCAAwB,EAAC,KAAK,CAAC,EAA/G,iBAAiB,uBAAA,EAAE,mBAAmB,yBAAA,EAAE,kBAAkB,wBAAA,EAAE,gBAAgB,sBAAmC,CAAC;IAEvH,IAAI,kBAAkB,GAAG,CAAC,CAAC;IAC3B,IAAI,yBAAyB,GAAG,CAAC,CAAC;IAClC,QAAQ,CAAC,OAAO,CAAC,UAAC,CAAkE;QAClF,IAAI,CAAC,CAAC,KAAK,CAAC,SAAS,KAAK,SAAS,EAAE;YACnC,kBAAkB,IAAI,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC;YACxC,yBAAyB,EAAE,CAAC;SAC7B;IACH,CAAC,CAAC,CAAC;IAEH,IAAM,yBAAyB,GAAG,IAAI,CAAC,IAAI,CAAC,kBAAkB,GAAG,CAAC,QAAQ,CAAC,MAAM,GAAG,yBAAyB,CAAC,CAAC,CAAC;IAEhH,IAAM,QAAQ,GAAG,CAAC,CAAC,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC,YAAY,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,YAAY,IAAI,WAAW,CAAC,CAAC,CAAC,KAAK,CAAC,WAAW,IAAI,EAAE,CAAC;IAEnI,OAAO,CACH,oBAAC,eAAI,IACH,KAAK,EAAE;YACL,YAAY,EAAE,mBAAmB,KAAK,IAAI,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;YAClE,WAAW,EAAE,kBAAkB,KAAK,IAAI,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;YAChE,UAAU,EAAE,iBAAiB,KAAK,IAAI,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;YAC9D,SAAS,EAAE,gBAAgB,KAAK,IAAI,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;YAC5D,KAAK,EAAE,MAAM;YACb,OAAO,EAAE,MAAM;YACf,aAAa,EAAE,KAAK;YACpB,cAAc,EAAE,eAAe;YAC/B,eAAe,EAAE,QAAQ;SAC1B,IAGG,QAAQ,CAAC,GAAG,CAAC,UAAC,EAAE,EAAE,WAAW;;QAAK,OAAA,KAAK,CAAC,YAAY,CAAC,EAAE,EAAE;YACvD,SAAS,EAAE,MAAA,EAAE,CAAC,KAAK,CAAC,SAAS,mCAAI,yBAAyB;YAC1D,IAAI,EAAE,KAAK,CAAC,IAAI;YAChB,GAAG,EAAE,WAAW;YAChB,QAAQ,EAAE,KAAK,CAAC,QAAQ;YACxB,SAAS,EAAE,KAAK,CAAC,SAAS;YAC1B,iBAAiB,EAAE,WAAW,KAAK,CAAC;YACpC,kBAAkB,EAAE,kBAAkB,IAAI,WAAW,KAAK,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC;SAChF,CAAC,CAAA;KAAA,CAAC,CAEF,CACV,CAAC;AACJ,CAAC,CAAA;AA5CY,QAAA,QAAQ,YA4CpB","sourcesContent":["import * as React from \"react\";\nimport {TableBorder, TableCell} from \"./TableCell\";\nimport {DataTableCell} from \"./DataTableCell\";\nimport {View} from \"@react-pdf/renderer\";\nimport {getDefaultBorderIncludes} from \"./Utils\";\nimport {TableBodyProps} from \"./TableBody\";\n\nexport interface TableRowProps extends TableBorder {\n    /**\n     * The font size as a valid unit defined in react-pdf.\n     */\n    fontSize?: number | string;\n\n    /**\n     * Whether to align the text. Defaults to left.\n     */\n    textAlign?: \"left\" | \"center\" | \"right\";\n\n    /**\n     * Any data associated, relevant if the parent is a {@see DataTableCell}.\n     */\n    data?: any;\n\n    /**\n     * Whether rows have alternating styles\n     */\n    zebra?: boolean;\n\n    /**\n     * Whether this row is even (true) or odd (false)\n     */\n    even?: boolean;\n\n    /**\n     * Specify the color of even rows\n     */\n    evenRowColor?: string;\n\n    /**\n     * Specify the color of odd rows\n     */\n    oddRowColor?: string;\n\n    /**\n     * fix 'Property children does not exists on type ... ts(2339)'\n     */\n    children: React.ReactNode;\n}\n\n/**\n * This component describes how to display a row.\n */\nexport const TableRow: React.FC<Partial<TableBodyProps>> = (props) => {\n  const rowCells: any[] = React.Children.toArray(props.children);\n  const {includeLeftBorder, includeBottomBorder, includeRightBorder, includeTopBorder} = getDefaultBorderIncludes(props);\n\n  let remainingWeighting = 1;\n  let numberOfWeightingsDefined = 0;\n  rowCells.forEach((i: ReturnType<typeof TableCell> | ReturnType<typeof DataTableCell>) => {\n    if (i.props.weighting !== undefined) {\n      remainingWeighting -= i.props.weighting;\n      numberOfWeightingsDefined++;\n    }\n  });\n\n  const weightingsPerNotSpecified = Math.ceil(remainingWeighting / (rowCells.length - numberOfWeightingsDefined));\n\n  const rowColor = ((props.zebra || props.evenRowColor) && props.even) ? props.evenRowColor || 'lightgray' : props.oddRowColor || '';\n\n  return (\n      <View\n        style={{\n          borderBottom: includeBottomBorder === true ? \"1pt solid black\" : 0,\n          borderRight: includeRightBorder === true ? \"1pt solid black\" : 0,\n          borderLeft: includeLeftBorder === true ? \"1pt solid black\" : 0,\n          borderTop: includeTopBorder === true ? \"1pt solid black\" : 0,\n          width: \"100%\",\n          display: \"flex\",\n          flexDirection: \"row\",\n          justifyContent: \"space-between\",\n          backgroundColor: rowColor,\n        }}\n      >\n          {\n            rowCells.map((rc, columnIndex) => React.cloneElement(rc, {\n              weighting: rc.props.weighting ?? weightingsPerNotSpecified,\n              data: props.data,\n              key: columnIndex,\n              fontSize: props.fontSize,\n              textAlign: props.textAlign,\n              includeLeftBorder: columnIndex === 0,\n              includeRightBorder: includeRightBorder && columnIndex !== (rowCells.length - 1)\n            }))\n          }\n      </View>\n  );\n}\n"]}