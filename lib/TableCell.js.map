{"version":3,"file":"TableCell.js","sourceRoot":"","sources":["../src/TableCell.tsx"],"names":[],"mappings":";;;;;;;;;;;;AAAA,6BAA+B;AAC/B,gDAAyD;AACzD,iCAAmE;AA6D5D,IAAM,SAAS,GAA6B,UAAC,KAAK;;IACrD,IAAM,OAAO,GAAG,OAAO,KAAK,CAAC,QAAQ,KAAK,QAAQ;QAC9C,CAAC,CAAE,oBAAC,eAAI,QAAE,KAAK,CAAC,QAAQ,CAAQ;QAChC,CAAC,CAAC,OAAO,KAAK,CAAC,QAAQ,KAAK,QAAQ;YACpC,CAAC,CAAE,oBAAC,eAAI,QAAE,KAAK,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAQ;YAC3C,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC;IAEd,IAAA,kBAAkB,GAAI,IAAA,gCAAwB,EAAC,KAAK,CAAC,mBAAnC,CAAoC;IAE7D,IAAM,YAAY,GAAmB;QACjC,IAAI,EAAE,MAAA,KAAK,CAAC,SAAS,mCAAI,CAAC;QAE1B,cAAc,EAAE,SAAS;QACzB,SAAS,EAAE,MAAA,KAAK,CAAC,SAAS,mCAAI,MAAM;QACpC,QAAQ,EAAE,MAAA,KAAK,CAAC,QAAQ,mCAAI,CAAC,KAAK,CAAC,QAAQ,KAAK,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;QAC/D,WAAW,EAAE,kBAAkB,KAAK,IAAI,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;QAChE,QAAQ,EAAE,YAAY;QACtB,UAAU,EAAE,UAAU;KACzB,CAAC;IAEF,IAAM,YAAY;QACd,YAAY;OACT,IAAA,wBAAgB,EAAC,KAAK,CAAC,KAAK,CAAC,OACnC,CAAC;IAEF,OAAO,CACH,oBAAC,eAAI,IACD,KAAK,EAAE,YAAY,EACnB,IAAI,EAAE,IAAI,IAET,OAAO,CACL,CACV,CAAC;AACN,CAAC,CAAA;AAjCY,QAAA,SAAS,aAiCrB","sourcesContent":["import * as React from \"react\";\nimport ReactPDF, {Text, View} from \"@react-pdf/renderer\";\nimport {getDefaultBorderIncludes, transformToArray} from \"./Utils\";\n\n/**\n * Whether to include borders or not.\n * Depending on the context some toggles will not have any effect.\n */\nexport interface TableBorder {\n    /**\n     * Include the top border. Default true.\n     */\n    includeTopBorder?: boolean;\n\n    /**\n     * Include the right border. Default true.\n     */\n    includeRightBorder?: boolean;\n\n    /**\n     * Include the bottom border. Default true.\n     */\n    includeBottomBorder?: boolean;\n\n    /**\n     * Include the left border. Default true.\n     */\n    includeLeftBorder?: boolean;\n}\n\nexport interface TableCellProps extends TableBorder {\n    /**\n     * The weighting of a cell based on the flex layout style.\n     * This value is between 0..1, if not specified 1 is assumed, this will take up the remaining available space.\n     */\n    weighting?: number;\n\n    /**\n     * Extra styling to apply. These will override existing style with the same key.\n     */\n    style?: ReactPDF.Style | ReactPDF.Style[];\n\n    /**\n     * How to align the text\n     */\n    textAlign?: \"left\" | \"center\" | \"right\";\n\n    /**\n     * Whether this is a header cell or not. If not defined it will be false.\n     */\n    isHeader?: boolean;\n\n    /**\n     * The font-size to apply to the cell.\n     */\n    fontSize?: number | string;\n\n    children?: React.ReactNode;\n}\n\n/**\n * This component displays the associated content of it's children.\n */\nexport const TableCell: React.FC<TableCellProps> = (props) => {\n    const content = typeof props.children === \"string\"\n        ?  <Text>{props.children}</Text>\n        : typeof props.children === \"number\"\n        ?  <Text>{props.children.toString()}</Text>\n        : props.children;\n\n    const {includeRightBorder} = getDefaultBorderIncludes(props);\n\n    const defaultStyle: ReactPDF.Style = {\n        flex: props.weighting ?? 1,\n        // @ts-ignore\n        justifyContent: \"stretch\",\n        textAlign: props.textAlign ?? \"left\",\n        fontSize: props.fontSize ?? (props.isHeader === true ? 14 : 12),\n        borderRight: includeRightBorder === true ? \"1pt solid black\" : 0,\n        wordWrap: \"break-word\",\n        whiteSpace: \"pre-wrap\"\n    };\n\n    const mergedStyles: ReactPDF.Style[] = [\n        defaultStyle,\n        ...transformToArray(props.style)\n    ];\n\n    return (\n        <View\n            style={mergedStyles}\n            wrap={true}\n        >\n            {content}\n        </View>\n    );\n}\n"]}